
syntax = "proto3";
package adder.v1;
option go_package="github.com/robinbryce/quorum-gcp-preemptible/adder/api/adder/v1/adder";

import "google/api/annotations.proto";

message TransactionHash {
}

message Transaction {
    // follows the txdata type from [go-ethereum](https://github.com/ethereum/go-ethereum/blob/master/core/types/transaction.go)
    // names follow the yellow paper
    uint64 nonce = 1;
    bytes gas_price = 2; // big integer
    uint64 gas = 3;
    bytes to = 4; // address is 20 bytes
    bytes value = 5; // big integer
    bytes payload = 6;
    bytes v = 7; // big integer
    bytes r = 8; // big integer
    bytes s = 9; // big integer
}

message TransactionResponse {
    Transaction data = 1;
    bytes hash = 2; // go-ethereum common.Hash (which is 32 bytes)
}

message SetRequest {
    bytes value = 1; // big.Int
}

message GetRequest {
}

message GetResponse {
    bytes value = 1;
}

message AddRequest {
    bytes value = 1;
}

service Adder {
    rpc Set(SetRequest) returns (TransactionResponse) {
        option (google.api.http) = {
        post: "/quorumpreempt/v1/adder/set"
        body: "*"
        };
    }
    rpc Get(GetRequest) returns (GetResponse) {
        option (google.api.http) = {
        post: "/quorumpreempt/v1/adder/get"
        body: "*"
        };
    }
    rpc Add(AddRequest) returns (TransactionResponse) {
        option (google.api.http) = {
        post: "/quorumpreempt/v1/adder/add"
        body: "*"
        };
    }
}

// Health check request to find out the readiness/liveness.
message HealthCheckRequest {
  string service = 1;
}

// Health check response.
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.

  }
  ServingStatus status = 1;
}

// Health check request.
service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  rpc Watch(HealthCheckRequest) returns (HealthCheckResponse);
}
